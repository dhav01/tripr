{"ast":null,"code":"import _slicedToArray from\"C:/Users/dhaval agrawal/OneDrive/Desktop/triprtrail/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function FunComp(){var _useState=useState(0),_useState2=_slicedToArray(_useState,2),count=_useState2[0],setCount=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),count1=_useState4[0],setCount1=_useState4[1];var _useState5=useState({firstName:'',lastName:''}),_useState6=_slicedToArray(_useState5,2),name=_useState6[0],setName=_useState6[1];var increment=function increment(){setCount(count+1);};var decrement=function decrement(){if(count>1){setCount(count-1);}};var decrement1=function decrement1(){setCount1(count1-1);};var incrementBy10=function incrementBy10(){for(var i=0;i<10;i++){setCount(function(prevState){return prevState+1;});}};useEffect(function(){console.log('useEffect is componentDidMount and componentDidUpdate of functional component');},[count,count1]);//as we passed count only, useeffect will be callec only if count value is updated\n//to pass multiple items, use like this:  [count,count1]\nreturn/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"h1\",{children:\"Hello World\"})})//here spread operator is used to print firstname and lastname together\n//if you remove spread operator, only one of them is going to be printed on screen\n;}export default FunComp;","map":{"version":3,"sources":["C:/Users/dhaval agrawal/OneDrive/Desktop/triprtrail/src/Components/FunComp.js"],"names":["React","useState","useEffect","FunComp","count","setCount","count1","setCount1","firstName","lastName","name","setName","increment","decrement","decrement1","incrementBy10","i","prevState","console","log"],"mappings":"0KAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,C,gGAEA,QAASC,CAAAA,OAAT,EAAmB,eACSF,QAAQ,CAAC,CAAD,CADjB,wCACVG,KADU,eACHC,QADG,8BAEWJ,QAAQ,CAAC,CAAD,CAFnB,yCAEVK,MAFU,eAEFC,SAFE,8BAION,QAAQ,CAAC,CAAEO,SAAS,CAAE,EAAb,CAAiBC,QAAQ,CAAE,EAA3B,CAAD,CAJf,yCAIVC,IAJU,eAIJC,OAJI,eAMjB,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CACtBP,QAAQ,CAACD,KAAK,CAAG,CAAT,CAAR,CACD,CAFD,CAIA,GAAMS,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CACtB,GAAIT,KAAK,CAAG,CAAZ,CAAe,CACbC,QAAQ,CAACD,KAAK,CAAG,CAAT,CAAR,CACD,CACF,CAJD,CAMA,GAAMU,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CACvBP,SAAS,CAACD,MAAM,CAAG,CAAV,CAAT,CACD,CAFD,CAIA,GAAMS,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CAC1B,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAG,EAApB,CAAwBA,CAAC,EAAzB,CAA6B,CAC3BX,QAAQ,CAAC,SAACY,SAAD,QAAeA,CAAAA,SAAS,CAAG,CAA3B,EAAD,CAAR,CACD,CACF,CAJD,CAMAf,SAAS,CAAC,UAAM,CACdgB,OAAO,CAACC,GAAR,CACE,+EADF,EAGD,CAJQ,CAIN,CAACf,KAAD,CAAQE,MAAR,CAJM,CAAT,CAMA;AACA;AAEA,mBACE,sCACE,mCADF,EAiCA;AACA;AAnCF,CAqCD,CAED,cAAeH,CAAAA,OAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nfunction FunComp() {\r\n  const [count, setCount] = useState(0)\r\n  const [count1, setCount1] = useState(0)\r\n\r\n  const [name, setName] = useState({ firstName: '', lastName: '' })\r\n\r\n  const increment = () => {\r\n    setCount(count + 1)\r\n  }\r\n\r\n  const decrement = () => {\r\n    if (count > 1) {\r\n      setCount(count - 1)\r\n    }\r\n  }\r\n\r\n  const decrement1 = () => {\r\n    setCount1(count1 - 1)\r\n  }\r\n\r\n  const incrementBy10 = () => {\r\n    for (var i = 0; i < 10; i++) {\r\n      setCount((prevState) => prevState + 1)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    console.log(\r\n      'useEffect is componentDidMount and componentDidUpdate of functional component'\r\n    )\r\n  }, [count, count1])\r\n\r\n  //as we passed count only, useeffect will be callec only if count value is updated\r\n  //to pass multiple items, use like this:  [count,count1]\r\n\r\n  return (\r\n    <>\r\n      <h1>Hello World</h1>\r\n\r\n      {/* <h1>count value: {count}</h1>\r\n      <div>\r\n        <button onClick={increment}>+</button>\r\n        <button onClick={incrementBy10}>+ by 10</button>\r\n        <button onClick={decrement}>-</button>\r\n      </div>\r\n      <h1>2nd counter Value: {count1} </h1>\r\n      <button onClick={decrement1}>-</button>\r\n\r\n      <form>\r\n        <input\r\n          type='text'\r\n          placeholder='firstName'\r\n          value={name.firstName}\r\n          onChange={(e) => {\r\n            setName({ ...name, firstName: e.target.value })\r\n          }}\r\n        ></input>\r\n        <input\r\n          type='text'\r\n          placeholder='lastName'\r\n          value={name.lastName}\r\n          onChange={(e) => {\r\n            setName({ ...name, lastName: e.target.value })\r\n          }}\r\n        ></input>\r\n      </form>\r\n      {name.firstName}\r\n      {name.lastName} */}\r\n    </>\r\n    //here spread operator is used to print firstname and lastname together\r\n    //if you remove spread operator, only one of them is going to be printed on screen\r\n  )\r\n}\r\n\r\nexport default FunComp\r\n"]},"metadata":{},"sourceType":"module"}