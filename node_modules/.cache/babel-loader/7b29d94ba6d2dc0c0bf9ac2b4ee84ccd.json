{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dhaval agrawal\\\\OneDrive\\\\Desktop\\\\triprtrail\\\\src\\\\Components\\\\FunComp.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction FunComp() {\n  _s();\n\n  const [count, setCount] = useState(0);\n  const [count1, setCount1] = useState(0);\n  const [name, setName] = useState({\n    firstName: '',\n    lastName: ''\n  });\n\n  const increment = () => {\n    setCount(count + 1);\n  };\n\n  const decrement = () => {\n    if (count > 1) {\n      setCount(count - 1);\n    }\n  };\n\n  const decrement1 = () => {\n    setCount1(count1 - 1);\n  };\n\n  const incrementBy10 = () => {\n    for (var i = 0; i < 10; i++) {\n      setCount(prevState => prevState + 1);\n    }\n  };\n\n  useEffect(() => {\n    console.log('useEffect is componentDidMount and componentDidUpdate of functional component');\n  }, [count, count1]); //as we passed count only, useeffect will be callec only if count value is updated\n  //to pass multiple items, use like this:  [count,count1]\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hello World\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false) //here spread operator is used to print firstname and lastname together\n  //if you remove spread operator, only one of them is going to be printed on screen\n  ;\n}\n\n_s(FunComp, \"mnRUzLRYpxilp9TAojls5Q4kz50=\");\n\n_c = FunComp;\nexport default FunComp;\n\nvar _c;\n\n$RefreshReg$(_c, \"FunComp\");","map":{"version":3,"sources":["C:/Users/dhaval agrawal/OneDrive/Desktop/triprtrail/src/Components/FunComp.js"],"names":["React","useState","useEffect","FunComp","count","setCount","count1","setCount1","name","setName","firstName","lastName","increment","decrement","decrement1","incrementBy10","i","prevState","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;AAEA,SAASC,OAAT,GAAmB;AAAA;;AACjB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,CAAD,CAApC;AAEA,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC;AAAES,IAAAA,SAAS,EAAE,EAAb;AAAiBC,IAAAA,QAAQ,EAAE;AAA3B,GAAD,CAAhC;;AAEA,QAAMC,SAAS,GAAG,MAAM;AACtBP,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD,GAFD;;AAIA,QAAMS,SAAS,GAAG,MAAM;AACtB,QAAIT,KAAK,GAAG,CAAZ,EAAe;AACbC,MAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD;AACF,GAJD;;AAMA,QAAMU,UAAU,GAAG,MAAM;AACvBP,IAAAA,SAAS,CAACD,MAAM,GAAG,CAAV,CAAT;AACD,GAFD;;AAIA,QAAMS,aAAa,GAAG,MAAM;AAC1B,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BX,MAAAA,QAAQ,CAAEY,SAAD,IAAeA,SAAS,GAAG,CAA5B,CAAR;AACD;AACF,GAJD;;AAMAf,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,OAAO,CAACC,GAAR,CACE,+EADF;AAGD,GAJQ,EAIN,CAACf,KAAD,EAAQE,MAAR,CAJM,CAAT,CA1BiB,CAgCjB;AACA;;AAEA,sBACE;AAAA,2BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF,CAkCE;AACA;AAnCF;AAqCD;;GAxEQH,O;;KAAAA,O;AA0ET,eAAeA,OAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nfunction FunComp() {\r\n  const [count, setCount] = useState(0)\r\n  const [count1, setCount1] = useState(0)\r\n\r\n  const [name, setName] = useState({ firstName: '', lastName: '' })\r\n\r\n  const increment = () => {\r\n    setCount(count + 1)\r\n  }\r\n\r\n  const decrement = () => {\r\n    if (count > 1) {\r\n      setCount(count - 1)\r\n    }\r\n  }\r\n\r\n  const decrement1 = () => {\r\n    setCount1(count1 - 1)\r\n  }\r\n\r\n  const incrementBy10 = () => {\r\n    for (var i = 0; i < 10; i++) {\r\n      setCount((prevState) => prevState + 1)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    console.log(\r\n      'useEffect is componentDidMount and componentDidUpdate of functional component'\r\n    )\r\n  }, [count, count1])\r\n\r\n  //as we passed count only, useeffect will be callec only if count value is updated\r\n  //to pass multiple items, use like this:  [count,count1]\r\n\r\n  return (\r\n    <>\r\n      <h1>Hello World</h1>\r\n\r\n      {/* <h1>count value: {count}</h1>\r\n      <div>\r\n        <button onClick={increment}>+</button>\r\n        <button onClick={incrementBy10}>+ by 10</button>\r\n        <button onClick={decrement}>-</button>\r\n      </div>\r\n      <h1>2nd counter Value: {count1} </h1>\r\n      <button onClick={decrement1}>-</button>\r\n\r\n      <form>\r\n        <input\r\n          type='text'\r\n          placeholder='firstName'\r\n          value={name.firstName}\r\n          onChange={(e) => {\r\n            setName({ ...name, firstName: e.target.value })\r\n          }}\r\n        ></input>\r\n        <input\r\n          type='text'\r\n          placeholder='lastName'\r\n          value={name.lastName}\r\n          onChange={(e) => {\r\n            setName({ ...name, lastName: e.target.value })\r\n          }}\r\n        ></input>\r\n      </form>\r\n      {name.firstName}\r\n      {name.lastName} */}\r\n    </>\r\n    //here spread operator is used to print firstname and lastname together\r\n    //if you remove spread operator, only one of them is going to be printed on screen\r\n  )\r\n}\r\n\r\nexport default FunComp\r\n"]},"metadata":{},"sourceType":"module"}